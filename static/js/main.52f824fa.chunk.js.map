{"version":3,"sources":["pages/Users/users.module.scss","pages/Posts/posts.module.scss","pages/Comments/comments.module.scss","services/services.js","services/env.js","pages/Users/users.jsx","pages/Posts/posts.jsx","pages/Albums/albums.jsx","pages/Comments/comments.jsx","Layout/app.jsx","serviceWorker.js","index.js","pages/Albums/albums.module.scss"],"names":["module","exports","users__page","loading","title","gridContainer","gridItem","card","cardContent","userPic","userName","userEmail","cardActions","posts__page","postTitle","postBody","btnAddPost","comments__page","commentName","commentBody","btnAddComment","API","axios","create","baseURL","Users","state","isFetchingUsers","users","getUsers","_callee","response","regenerator_default","a","wrap","_context","prev","next","_this","setState","get","sent","data","t0","console","log","finish","stop","this","onActionsClick","_callee2","user","to","_context2","props","history","push","concat","id","componentDidMount","_callee3","_context3","_this2","_this$state","react_default","createElement","className","classes","CircularProgress_default","color","Fragment","Grid_default","container","spacing","map","item","xs","key","Card_default","CardContent_default","Avatar_default","alt","src","name","email","CardActions_default","Button_default","onClick","Component","Posts","isFetchingPosts","posts","selectedPost","useForEdit","openDialog","isSaving","postContent","getPosts","params","userId","match","onCommentsClick","post","onDeletePost","index","delete","Object","toConsumableArray","findIndex","postObj","splice","onEditClick","body","onAddClick","_callee4","_context4","onDialogClose","_callee5","_context5","onDialogSave","_callee6","_context6","put","objectSpread","_callee7","_context7","Fab_default","Add_default","Dialog_default","open","onClose","fullWidth","DialogTitle_default","DialogContent_default","TextField_default","autoFocus","margin","label","type","variant","value","onChange","event","target","multiline","rows","rowsMax","DialogActions_default","Albums","isFetchingAlbums","albums","expanded","getAlbums","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","album","undefined","Symbol","iterator","done","photos","isFetchingPhotos","return","t1","onExpandChange","_ref2","asyncToGenerator","mark","matchIndex","isEmpty","abrupt","albumObj","setTimeout","getPhotos","_x","_x2","apply","arguments","albumId","albums__page","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","albumTitle","ExpansionPanelDetails_default","imagesRoot","GridList_default","gridList","cols","photo","GridListTile_default","thumbnailUrl","GridListTileBar_default","Comments","isFetchingComments","comments","selectedComment","commentContent","getComments","postId","onDeleteComment","comment","commentObj","App","rootPages","Switch","Route","path","exact","component","render","Redirect","Boolean","window","location","hostname","app","BrowserRouter","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52f824fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"users__page\":\"users_users__page___jJHG\",\"loading\":\"users_loading__3E1YH\",\"title\":\"users_title__25MU5\",\"gridContainer\":\"users_gridContainer__3l5dp\",\"gridItem\":\"users_gridItem__xeXyC\",\"card\":\"users_card__2KkX_\",\"cardContent\":\"users_cardContent__2aXFN\",\"userPic\":\"users_userPic__1m13V\",\"userName\":\"users_userName__37hT0\",\"userEmail\":\"users_userEmail__18FX3\",\"cardActions\":\"users_cardActions__3BKGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts__page\":\"posts_posts__page__1_mwW\",\"loading\":\"posts_loading__3Ocq0\",\"title\":\"posts_title__3qUwt\",\"gridContainer\":\"posts_gridContainer__1XHR3\",\"gridItem\":\"posts_gridItem__2E-Un\",\"card\":\"posts_card__31bJn\",\"cardContent\":\"posts_cardContent__3ZEnl\",\"postTitle\":\"posts_postTitle__2N760\",\"postBody\":\"posts_postBody__3FGHz\",\"cardActions\":\"posts_cardActions__3gTaJ\",\"btnAddPost\":\"posts_btnAddPost__3c2rR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments__page\":\"comments_comments__page__1h-tu\",\"loading\":\"comments_loading__95gvQ\",\"title\":\"comments_title__23jI0\",\"gridContainer\":\"comments_gridContainer__3zBPI\",\"gridItem\":\"comments_gridItem__2VEAW\",\"card\":\"comments_card__1_6Yo\",\"cardContent\":\"comments_cardContent__3MnT5\",\"commentName\":\"comments_commentName__2YRYx\",\"commentBody\":\"comments_commentBody__hKahA\",\"cardActions\":\"comments_cardActions__23Ecl\",\"btnAddComment\":\"comments_btnAddComment__sOjjy\"};","import axios from 'axios'\nimport { BASE_URL } from './env'\n\nconst API = axios.create({\n  baseURL: BASE_URL\n})\n\nexport default API\n","// Base Url for the API Request\nexport const BASE_URL = 'https://jsonplaceholder.typicode.com/'\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Avatar from '@material-ui/core/Avatar'\nimport Button from '@material-ui/core/Button'\n\nimport classes from './users.module.scss'\n\nimport API from '../../services/services'\n\nclass Users extends Component {\n  state = {\n    isFetchingUsers: true,\n    users: []\n  }\n\n  getUsers = async () => {\n    try {\n      await this.setState({\n        isFetchingUsers: true\n      })\n\n      const response = await API.get('/users')\n      await this.setState({\n        users: response.data\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      this.setState({\n        isFetchingUsers: false\n      })\n    }\n  }\n\n  onActionsClick = async (user, to) => {\n    this.props.history.push(`users/${user.id}/${to}`)\n  }\n\n  componentDidMount = async () => {\n    await this.getUsers()\n  }\n\n  render() {\n    const { isFetchingUsers, users } = this.state\n\n    return (\n      <div className={classes.users__page}>\n        {/* Show loading if still fetching the data from API */}\n        {isFetchingUsers ? (\n          <div className={classes.loading}>\n            <CircularProgress color=\"primary\" />\n          </div>\n        ) : (\n          <>\n            {/* Show lists of users */}\n            <p className={classes.title}>Users</p>\n            <Grid container spacing={24} className={classes.gridContainer}>\n              {users.map(user => {\n                return (\n                  <Grid item xs={2} key={user.id} className={classes.gridItem}>\n                    <Card className={classes.card}>\n                      <CardContent className={classes.cardContent}>\n                        <Avatar\n                          alt=\"user_pic\"\n                          src=\"https://via.placeholder.com/150\"\n                          className={classes.userPic}\n                        />\n                        <p className={classes.userName}>{user.name}</p>\n                        <p className={classes.userEmail}>{user.email}</p>\n                      </CardContent>\n                      <CardActions className={classes.cardActions}>\n                        <Button\n                          color=\"primary\"\n                          onClick={() => this.onActionsClick(user, 'posts')}\n                        >\n                          Posts\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => this.onActionsClick(user, 'albums')}\n                        >\n                          Albums\n                        </Button>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n          </>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Users\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nimport classes from './posts.module.scss'\n\nimport API from '../../services/services'\n\nclass Posts extends Component {\n  state = {\n    isFetchingPosts: true,\n    posts: [],\n\n    // For Add or Edit Post\n    selectedPost: {},\n    useForEdit: false,\n    openDialog: false,\n    isSaving: false,\n    postTitle: '',\n    postContent: ''\n  }\n\n  getPosts = async () => {\n    try {\n      await this.setState({\n        isFetchingPosts: true\n      })\n\n      const response = await API.get('/posts', {\n        params: {\n          userId: this.props.match.params.userId\n        }\n      })\n      await this.setState({\n        posts: response.data\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      this.setState({\n        isFetchingPosts: false\n      })\n    }\n  }\n\n  onCommentsClick = post => {\n    this.props.history.push(\n      `/users/${this.props.match.params.userId}/posts/${post.id}/comments`\n    )\n  }\n\n  onDeletePost = async post => {\n    try {\n      await API.delete(`/posts/${post.id}`)\n\n      const posts = [...this.state.posts]\n      const index = posts.findIndex(postObj => postObj.id === post.id)\n      posts.splice(index, 1)\n\n      await this.setState({ posts })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  onEditClick = async post => {\n    await this.setState({\n      useForEdit: true,\n      openDialog: true,\n      postTitle: post.title,\n      postContent: post.body,\n      selectedPost: post\n    })\n  }\n\n  onAddClick = async () => {\n    await this.setState({\n      useForEdit: false,\n      openDialog: true\n    })\n  }\n\n  onDialogClose = async () => {\n    await this.setState({\n      openDialog: false,\n      postTitle: '',\n      postContent: ''\n    })\n  }\n\n  onDialogSave = async () => {\n    try {\n      await this.setState({ isSaving: true })\n\n      let response, posts\n\n      // If used for Edit Post\n      if (this.state.useForEdit) {\n        response = await API.put(`/posts/${this.state.selectedPost.id}`, {\n          data: {\n            id: this.state.selectedPost.id,\n            title: this.state.postTitle,\n            body: this.state.postContent,\n            userId: this.props.match.params.userId\n          }\n        })\n\n        posts = [...this.state.posts]\n        const index = posts.findIndex(\n          postObj => postObj.id === this.state.selectedPost.id\n        )\n        posts[index].title = this.state.postTitle\n        posts[index].body = this.state.postContent\n      }\n\n      // if for Add Post\n      else {\n        response = await API.post('/posts', {\n          data: {\n            title: this.state.postTitle,\n            body: this.state.postContent,\n            userId: this.props.match.params.userId\n          }\n        })\n\n        posts = [...this.state.posts]\n        const post = {\n          id: response.data.id,\n          ...response.data.data\n        }\n        posts.push(post)\n      }\n\n      await this.setState({\n        posts,\n        postTitle: '',\n        postContent: ''\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        isSaving: false,\n        openDialog: false\n      })\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.getPosts()\n  }\n\n  render() {\n    const {\n      isFetchingPosts,\n      posts,\n      openDialog,\n      postTitle,\n      postContent,\n      useForEdit,\n      isSaving\n    } = this.state\n\n    return (\n      <div className={classes.posts__page}>\n        {/* Show loading if still fetching the data from API */}\n        {isFetchingPosts ? (\n          <div className={classes.loading}>\n            <CircularProgress color=\"primary\" />\n          </div>\n        ) : (\n          <>\n            {/* Show lists of posts */}\n            <p className={classes.title}>\n              Posts from UserID: {this.props.match.params.userId}\n            </p>\n            <Grid container spacing={24} className={classes.gridContainer}>\n              {posts.map(post => {\n                return (\n                  <Grid item xs={3} key={post.id} className={classes.gridItem}>\n                    <Card className={classes.card}>\n                      <CardContent className={classes.cardContent}>\n                        <p className={classes.postTitle}>{post.title}</p>\n                        <p className={classes.postBody}>{post.body}</p>\n                      </CardContent>\n                      <CardActions className={classes.cardActions}>\n                        <Button\n                          color=\"default\"\n                          onClick={() => this.onCommentsClick(post)}\n                        >\n                          Comments\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          onClick={() => this.onEditClick(post)}\n                        >\n                          Edit\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => this.onDeletePost(post)}\n                        >\n                          Delete\n                        </Button>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n\n            {/* Button add post */}\n            <Fab\n              color=\"primary\"\n              className={classes.btnAddPost}\n              onClick={() => this.onAddClick()}\n            >\n              <AddIcon />\n            </Fab>\n\n            {/* Add or Edit Dialog */}\n            <Dialog open={openDialog} onClose={this.onDialogClose} fullWidth>\n              <DialogTitle>{useForEdit ? 'Edit' : 'Add'} Post</DialogTitle>\n              <DialogContent>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  label=\"Title\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  fullWidth\n                  value={postTitle}\n                  onChange={event =>\n                    this.setState({ postTitle: event.target.value })\n                  }\n                />\n                <TextField\n                  margin=\"dense\"\n                  label=\"Content\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  multiline\n                  rows=\"5\"\n                  rowsMax=\"5\"\n                  fullWidth\n                  value={postContent}\n                  onChange={event =>\n                    this.setState({ postContent: event.target.value })\n                  }\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.onDialogClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={this.onDialogSave} color=\"secondary\">\n                  {isSaving ? (\n                    <CircularProgress />\n                  ) : useForEdit ? (\n                    'Update Post'\n                  ) : (\n                    'Add Post'\n                  )}\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Posts\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport GridList from '@material-ui/core/GridList'\nimport GridListTile from '@material-ui/core/GridListTile'\nimport GridListTileBar from '@material-ui/core/GridListTileBar'\nimport isEmpty from 'lodash/isEmpty'\n\nimport classes from './albums.module.scss'\n\nimport API from '../../services/services'\n\nclass Albums extends Component {\n  state = {\n    isFetchingAlbums: false,\n    albums: [],\n    expanded: null\n  }\n\n  getAlbums = async () => {\n    try {\n      await this.setState({\n        isFetchingAlbums: true\n      })\n\n      const response = await API.get('albums', {\n        params: {\n          userId: this.props.match.params.userId\n        }\n      })\n\n      const albums = []\n      for (const album of response.data) {\n        const item = {\n          ...album,\n          photos: [],\n          isFetchingPhotos: false\n        }\n\n        albums.push(item)\n      }\n\n      await this.setState({ albums })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      this.setState({\n        isFetchingAlbums: false\n      })\n    }\n  }\n\n  onExpandChange = album => async (event, expanded) => {\n    await this.setState({\n      expanded: expanded ? album.id : false\n    })\n\n    if (!isEmpty(album.photos)) return\n\n    const matchIndex = this.state.albums.findIndex(\n      albumObj => albumObj.id === album.id\n    )\n    const albums = [...this.state.albums]\n\n    albums[matchIndex].isFetchingPhotos = true\n    await this.setState({ albums })\n    setTimeout(() => {\n      this.getPhotos(album)\n    }, 1500)\n  }\n\n  getPhotos = async album => {\n    const matchIndex = this.state.albums.findIndex(\n      albumObj => albumObj.id === album.id\n    )\n    const albums = [...this.state.albums]\n\n    try {\n      albums[matchIndex].isFetchingPhotos = true\n      await this.setState({ albums })\n\n      const response = await API.get('photos', {\n        params: {\n          albumId: album.id\n        }\n      })\n\n      albums[matchIndex].photos = response.data\n      await this.setState({ albums })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      albums[matchIndex].isFetchingPhotos = false\n      await this.setState({ albums })\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.getAlbums()\n  }\n\n  render() {\n    const { isFetchingAlbums, albums, expanded } = this.state\n\n    return (\n      <div className={classes.albums__page}>\n        {/* Show loading if still fetching the data from API */}\n        {isFetchingAlbums ? (\n          <div className={classes.loading}>\n            <CircularProgress color=\"primary\" />\n          </div>\n        ) : (\n          <>\n            {/* Show lists of albums */}\n            <p className={classes.title}>Albums from UserID: {this.props.match.params.userId}</p>\n            {albums.map(album => (\n              <ExpansionPanel\n                expanded={expanded === album.id}\n                onChange={this.onExpandChange(album)}\n                key={album.id}\n              >\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <p className={classes.albumTitle}>{album.title}</p>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  {/* Show Photos here */}\n                  {album.isFetchingPhotos ? (\n                    <div className={classes.loading}>\n                      <CircularProgress color=\"primary\" />\n                    </div>\n                  ) : (\n                    <div className={classes.imagesRoot}>\n                      <GridList className={classes.gridList} cols={6}>\n                        {album.photos.map(photo => (\n                          <GridListTile key={photo.id}>\n                            <img src={photo.thumbnailUrl} alt={photo.title} />\n                            <GridListTileBar title={photo.title} />\n                          </GridListTile>\n                        ))}\n                      </GridList>\n                    </div>\n                  )}\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            ))}\n          </>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Albums\n","import React, { Component } from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardActions from '@material-ui/core/CardActions'\nimport Button from '@material-ui/core/Button'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nimport classes from './comments.module.scss'\n\nimport API from '../../services/services'\n\nclass Comments extends Component {\n  state = {\n    isFetchingComments: true,\n    comments: [],\n\n    // For Add or Edit Comment\n    selectedComment: {},\n    useForEdit: false,\n    openDialog: false,\n    isSaving: false,\n    commentName: '',\n    commentContent: ''\n  }\n\n  getComments = async () => {\n    try {\n      await this.setState({\n        isFetchingComments: true\n      })\n\n      const response = await API.get('/comments', {\n        params: {\n          postId: this.props.match.params.postId\n        }\n      })\n      await this.setState({\n        comments: response.data\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      this.setState({\n        isFetchingComments: false\n      })\n    }\n  }\n\n  onDeleteComment = async comment => {\n    try {\n      await API.delete(`/comments/${comment.id}`)\n\n      const comments = [...this.state.comments]\n      const index = comments.findIndex(\n        commentObj => commentObj.id === comment.id\n      )\n      comments.splice(index, 1)\n\n      await this.setState({ comments })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  onEditClick = async comment => {\n    await this.setState({\n      useForEdit: true,\n      openDialog: true,\n      commentName: comment.name,\n      commentContent: comment.body,\n      selectedComment: comment\n    })\n  }\n\n  onAddClick = async () => {\n    await this.setState({\n      useForEdit: false,\n      openDialog: true\n    })\n  }\n\n  onDialogClose = async () => {\n    await this.setState({\n      openDialog: false,\n      commentName: '',\n      commentContent: ''\n    })\n  }\n\n  onDialogSave = async () => {\n    try {\n      await this.setState({ isSaving: true })\n\n      let response, comments\n\n      // If used for Edit Comment\n      if (this.state.useForEdit) {\n        response = await API.put(`/comments/${this.state.selectedComment.id}`, {\n          data: {\n            name: this.state.commentName,\n            body: this.state.commentContent\n          }\n        })\n\n        comments = [...this.state.comments]\n        const index = comments.findIndex(\n          commentObj => commentObj.id === this.state.selectedComment.id\n        )\n        comments[index].name = this.state.commentName\n        comments[index].body = this.state.commentContent\n      }\n\n      // if for Add Comment\n      else {\n        response = await API.post('/comments', {\n          data: {\n            name: this.state.commentName,\n            body: this.state.commentContent\n          }\n        })\n\n        comments = [...this.state.comments]\n        const comment = {\n          id: response.data.id,\n          ...response.data.data\n        }\n        comments.push(comment)\n      }\n\n      await this.setState({\n        comments,\n        commentName: '',\n        commentContent: ''\n      })\n    } catch (error) {\n      console.log(error)\n    } finally {\n      await this.setState({\n        isSaving: false,\n        openDialog: false\n      })\n    }\n  }\n\n  componentDidMount = async () => {\n    await this.getComments()\n  }\n\n  render() {\n    const {\n      isFetchingComments,\n      comments,\n      openDialog,\n      commentName,\n      commentContent,\n      useForEdit,\n      isSaving\n    } = this.state\n\n    return (\n      <div className={classes.comments__page}>\n        {/* Show loading if still fetching the data from API */}\n        {isFetchingComments ? (\n          <div className={classes.loading}>\n            <CircularProgress color=\"primary\" />\n          </div>\n        ) : (\n          <>\n            {/* Show lists of comments */}\n            <p className={classes.title}>\n              Comments from PostID: {this.props.match.params.postId}\n            </p>\n            <Grid container spacing={24} className={classes.gridContainer}>\n              {comments.map(comment => {\n                return (\n                  <Grid\n                    item\n                    xs={3}\n                    key={comment.id}\n                    className={classes.gridItem}\n                  >\n                    <Card className={classes.card}>\n                      <CardContent className={classes.cardContent}>\n                        <p className={classes.commentName}>{comment.name}</p>\n                        <p className={classes.commentBody}>{comment.body}</p>\n                      </CardContent>\n                      <CardActions className={classes.cardActions}>\n                        <Button\n                          color=\"primary\"\n                          onClick={() => this.onEditClick(comment)}\n                        >\n                          Edit\n                        </Button>\n                        <Button\n                          color=\"secondary\"\n                          onClick={() => this.onDeleteComment(comment)}\n                        >\n                          Delete\n                        </Button>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                )\n              })}\n            </Grid>\n\n            {/* Button add comment */}\n            <Fab\n              color=\"primary\"\n              className={classes.btnAddComment}\n              onClick={() => this.onAddClick()}\n            >\n              <AddIcon />\n            </Fab>\n\n            {/* Add or Edit Dialog */}\n            <Dialog open={openDialog} onClose={this.onDialogClose} fullWidth>\n              <DialogTitle>{useForEdit ? 'Edit' : 'Add'} Comment</DialogTitle>\n              <DialogContent>\n                <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  label=\"Name\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  fullWidth\n                  value={commentName}\n                  onChange={event =>\n                    this.setState({ commentName: event.target.value })\n                  }\n                />\n                <TextField\n                  margin=\"dense\"\n                  label=\"Comment\"\n                  type=\"text\"\n                  variant=\"outlined\"\n                  multiline\n                  rows=\"5\"\n                  rowsMax=\"5\"\n                  fullWidth\n                  value={commentContent}\n                  onChange={event =>\n                    this.setState({ commentContent: event.target.value })\n                  }\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.onDialogClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={this.onDialogSave} color=\"secondary\">\n                  {isSaving ? (\n                    <CircularProgress />\n                  ) : useForEdit ? (\n                    'Update Comment'\n                  ) : (\n                    'Add Comment'\n                  )}\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Comments\n","import React, { Component } from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport classes from './app.module.scss'\n\n// Pages\nimport Users from '../pages/Users/users'\nimport Posts from '../pages/Posts/posts'\nimport Albums from '../pages/Albums/albums'\nimport Comments from '../pages/Comments/comments'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={classes.rootPages}>\n        <Switch>\n          <Route path=\"/\" exact component={Users} />\n          <Route path=\"/users/:userId/posts\" exact component={Posts} />\n          <Route\n            path=\"/users/:userId/posts/:postId/comments\"\n            component={Comments}\n          />\n          <Route path=\"/users/:userId/albums\" component={Albums} />\n          <Route path=\"*\" render={() => <Redirect to=\"/\" />} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.scss'\nimport App from './Layout/app'\nimport * as serviceWorker from './serviceWorker'\n\n// Wrap root component so that we can use router inside it\nconst app = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"albums__page\":\"albums_albums__page__3eDQY\",\"loading\":\"albums_loading__26Umh\",\"title\":\"albums_title__yygiZ\",\"albumTitle\":\"albums_albumTitle__23vL7\",\"imagesRoot\":\"albums_imagesRoot__1aR9F\",\"gridList\":\"albums_gridList__2rp3S\"};"],"sourceRoot":""}